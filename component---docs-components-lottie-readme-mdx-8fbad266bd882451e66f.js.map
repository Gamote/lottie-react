{"version":3,"sources":["webpack:///../docs/components/Lottie/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---docs-components-lottie-readme-mdx-8fbad266bd882451e66f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/su/Personal/Projects/Playground/lottie-react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport LottieExamples from \"./LottieExamples\";\nimport LottieWithInteractivity from \"./LottieWithInteractivity.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lottie\"\n    }}>{`Lottie`}</h1>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <LottieExamples mdxType=\"LottieExamples\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport groovyWalkAnimation from \"./groovyWalk.json\";\n\nconst Example = () => {\n  return <Lottie animationData={groovyWalkAnimation} />;\n};\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <h3 {...{\n      \"id\": \"animationdata\"\n    }}><inlineCode parentName=\"h3\">{`animationData`}</inlineCode></h3>\n    <p>{`A JSON Object with the exported animation data`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Object\nDefault: none\nRequired: ☑\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"loop\"\n    }}><inlineCode parentName=\"h3\">{`loop`}</inlineCode></h3>\n    <p>{`Set it to true for infinite amount of loops, or pass a number to specify how many times should the last segment played be looped (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/airbnb/lottie-web/issues/1450\"\n      }}>{`More info`}</a>{`)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Boolean | Number\nDefault: true\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"autoplay\"\n    }}><inlineCode parentName=\"h3\">{`autoplay`}</inlineCode></h3>\n    <p>{`If set to true, animation will play as soon as it's loaded`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Boolean\nDefault: true\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"initialsegment\"\n    }}><inlineCode parentName=\"h3\">{`initialSegment`}</inlineCode></h3>\n    <p>{`Expects an array of length 2. First value is the initial frame, second value is the final frame. If this is set, the animation will start at this position in time instead of the exported value from AE`}</p>\n    <p><strong parentName=\"p\">{`Gotcha`}</strong>{`: The animation will re-run every time the segment array changes.  Therefore, to ensure that the animation behaves as expected, you must provide a stable array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Array\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"oncomplete\"\n    }}><inlineCode parentName=\"h3\">{`onComplete`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onloopcomplete\"\n    }}><inlineCode parentName=\"h3\">{`onLoopComplete`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onenterframe\"\n    }}><inlineCode parentName=\"h3\">{`onEnterFrame`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onsegmentstart\"\n    }}><inlineCode parentName=\"h3\">{`onSegmentStart`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onconfigready\"\n    }}><inlineCode parentName=\"h3\">{`onConfigReady`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondataready\"\n    }}><inlineCode parentName=\"h3\">{`onDataReady`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondatafailed\"\n    }}><inlineCode parentName=\"h3\">{`onDataFailed`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"onloadedimages\"\n    }}><inlineCode parentName=\"h3\">{`onLoadedImages`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondomloaded\"\n    }}><inlineCode parentName=\"h3\">{`onDOMLoaded`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"ondestroy\"\n    }}><inlineCode parentName=\"h3\">{`onDestroy`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"style\"\n    }}><inlineCode parentName=\"h3\">{`style`}</inlineCode></h3>\n    <p>{`Style object that applies to the animation wrapper (which is a div)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Object\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"lottieref\"\n    }}><inlineCode parentName=\"h3\">{`lottieRef`}</inlineCode></h3>\n    <p>{`Expects a React ref object in which interaction methods will be stored`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: React.RefObject\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"interactivity\"\n    }}><inlineCode parentName=\"h3\">{`interactivity`}</inlineCode></h3>\n    <p>{`Interactivity params to sync animation with either scroll or cursor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Type: Object\nDefault: none\nRequired: ☐\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"reacthtmlpropshtmldivelement\"\n    }}><inlineCode parentName=\"h3\">{`React.HTMLProps<HTMLDivElement>`}</inlineCode></h3>\n    <p>{`Alongside the props listed above, the `}<inlineCode parentName=\"p\">{`<Lottie/>`}</inlineCode>{` component also extends `}<inlineCode parentName=\"p\">{`React.HTMLProps<HTMLDivElement>`}</inlineCode>{`. This allows you to pass props to the container `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport groovyWalkAnimation from \"./groovyWalk.json\";\n\nconst Example = () =>\n  <Lottie\n    animationData={groovyWalkAnimation}\n    aria-aria-labelledby=\"use lottie animation\"\n  />\n};\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interaction-methods\"\n    }}>{`Interaction methods`}</h2>\n    <p>{`These methods are designed to give you more control over the Lottie animation, and fill in the gaps left by the props:`}</p>\n    <h3 {...{\n      \"id\": \"play\"\n    }}><inlineCode parentName=\"h3\">{`play()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"stop\"\n    }}><inlineCode parentName=\"h3\">{`stop()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"pause\"\n    }}><inlineCode parentName=\"h3\">{`pause()`}</inlineCode></h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setspeedspeed\"\n    }}><inlineCode parentName=\"h3\">{`setSpeed(speed)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`speed: 1 is normal speed\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"gotoandplayvalue-isframe\"\n    }}><inlineCode parentName=\"h3\">{`goToAndPlay(value, isFrame)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`value: numeric value.\nisFrame: defines if first argument is a time based value or a frame based (default false).\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"gotoandstopvalue-isframe\"\n    }}><inlineCode parentName=\"h3\">{`goToAndStop(value, isFrame)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`value: numeric value.\nisFrame: defines if first argument is a time based value or a frame based (default false).\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setdirectiondirection\"\n    }}><inlineCode parentName=\"h3\">{`setDirection(direction)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`direction: 1 is forward, -1 is reverse.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"playsegmentssegments-forceflag\"\n    }}><inlineCode parentName=\"h3\">{`playSegments(segments, forceFlag)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`segments: array. Can contain 2 numeric values that will be used as first and last frame of the animation. Or can contain a sequence of arrays each with 2 numeric values.\nforceFlag: boolean. If set to false, it will wait until the current segment is complete. If true, it will update values immediately.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"setsubframeusesubframes\"\n    }}><inlineCode parentName=\"h3\">{`setSubframe(useSubFrames)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`useSubFrames: If false, it will respect the original AE fps. If true, it will update on every requestAnimationFrame with intermediate values. Default is true.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"getdurationinframes\"\n    }}><inlineCode parentName=\"h3\">{`getDuration(inFrames)`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`inFrames: If true, returns duration in frames, if false, in seconds\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"destroy\"\n    }}><inlineCode parentName=\"h3\">{`destroy()`}</inlineCode></h3>\n    <h3 {...{\n      \"id\": \"calling-the-methods\"\n    }}>{`Calling the methods`}</h3>\n    <p>{`To use the interaction methods listed above, pass a reference object to the Lottie component by using the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` prop (see the React documentation to learn more about `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`Ref`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#useref\"\n      }}>{`useRef`}</a>{` hook):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport groovyWalkAnimation from \"./groovyWalk.json\";\n\nconst Example = () => {\n  const lottieRef = useRef();\n\n  return <Lottie lottieRef={lottieRef} animationData={groovyWalkAnimation} />;\n};\n\nexport default Example;\n`}</code></pre>\n    <p>{`You can then use the interaction methods like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`...\nlottieRef.current.pause();\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interactivity-1\"\n    }}>{`Interactivity`}</h2>\n    <p>{`To sync animation with either scroll or cursor, you can pass the interactivity\nobject.`}</p>\n    <p>{`For more information please navigate to `}<strong parentName=\"p\">{`useLottieInteractivity`}</strong>{` hook`}</p>\n    <LottieWithInteractivity mdxType=\"LottieWithInteractivity\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Lottie from \"lottie-react\";\nimport robotAnimation from \"./robotAnimation.json\";\n\nconst style = {\n  height: 300,\n};\n\nconst interactivity = {\n  mode: \"scroll\",\n  actions: [\n    {\n      visibility: [0, 0.2],\n      type: \"stop\",\n      frames: [0],\n    },\n    {\n      visibility: [0.2, 0.45],\n      type: \"seek\",\n      frames: [0, 45],\n    },\n    {\n      visibility: [0.45, 1.0],\n      type: \"loop\",\n      frames: [45, 60],\n    },\n  ],\n};\n\nconst Example = () => {\n  return (\n    <Lottie\n      animationData={robotAnimation}\n      style={style}\n      interactivity={interactivity}\n    />\n  );\n};\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Soon :)`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}